package com.ubt.alpha1s.ui.helper;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONException;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothAdapter.LeScanCallback;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Message;

import com.ubt.alpha1s.data.JsonTools;
import com.ubt.alpha1s.data.TimeTools;
import com.ubt.alpha1s.data.model.UserInfo;
import com.ubt.alpha1s.log.MyLog;
import com.ubt.alpha1s.net.http.basic.GetDataFromWeb;
import com.ubt.alpha1s.net.http.basic.HttpAddress;
import com.ubt.alpha1s.net.http.basic.HttpAddress.Request_type;
import com.ubt.alpha1s.net.http.basic.IImageListener;
import com.ubt.alpha1s.net.http.basic.IJsonListener;
import com.ubt.alpha1s.ui.MainActivity;
import com.ubt.alpha1s.update.EngineUpdateManager;
import com.ubt.alpha1s.update.IEngineUpdateManagerListener;
import com.ubtechic.alpha1blooth.AlphaApplication;
import com.ubtechinc.base.AlphaInfo;
import com.ubtechinc.base.BlueToothManager;
import com.ubtechinc.base.BluetoothUtil;
import com.ubtechinc.base.ConstValue;
import com.ubtechinc.base.PublicInterface.BlueToothInteracter;
import com.ubtechinc.sqlite.DBAlphaInfoManager;

public class ScanHelper implements IImageListener, BlueToothInteracter,
		IJsonListener, IEngineUpdateManagerListener, LeScanCallback {

	public Boolean thiz_state;

	public static final String map_val_rebot_head_resource = "map_val_head_resource";
	public static final String map_val_rebot_name = "map_val_rebot_info_str";
	public static final String map_val_robot_mac = "map_val_robot_mac";
	public static final String map_val_robot_connect_state = "map_val_robot_connect_state";
	public static final String map_val_robot_rssi = "map_val_robot_rssi";
	// -------------------------------
	private IScanUI mUI;
	private Context mContext;
	private BluetoothAdapter mBtAdapter;
	private List<BluetoothDevice> mDevicesList;
	private Map<BluetoothDevice, Integer> mDevicesRssiMap;
	private static boolean is_need_update = false;

	private List<AlphaInfo> history_list;
	// -------------------------------
	private long do_read_user_head_img_request = -1;
	private long do_check_bin_version_request = -1;
	// -------------------------------
	private static final int MSG_DO_READ_USER_HEAD_IMG = 1001;
	private static final int MSG_DO_COON_BT_SUCCESS = 1002;
	private static final int MSG_DO_COON_BT_FAIL = 1003;
	private static final int MSG_DO_UPDATE_BIN = 1004;
	private static final int MSG_DO_SCAN_FINISH = 1005;
	// -------------------------------
	private String mCurrentLocalSoftVersion = null;
	private String mCurrentLocalHardVersion = null;
	private Timer mReadHardVersionTimer;
	private Timer StopScanBLETimer = null;
	private static Date lastTime_DV_HANDSHAKE = null;
	private static Date lastTime_onConnectState = null;
	private static Date lastTime_doGoToNextPage = null;
	// -------------------------------
	private BroadcastReceiver bvr_bt_discovery_new_devices = new BroadcastReceiver() {

		@Override
		public synchronized void onReceive(Context arg0, Intent arg1) {

			BluetoothDevice newDevices = arg1
					.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);

			MyLog.writeLog("rssi侦测", "发现新设备：" + newDevices.getAddress());
			if (getDeviceById(newDevices.getAddress()) == null) {
				mDevicesList.add(newDevices);
				MyLog.writeLog("rssi侦测", "设备总数：" + mDevicesList.size());
				mUI.onGetNewDevices(mDevicesList);

			}

		}
	};

	private BroadcastReceiver bvr_bt_state_change = new BroadcastReceiver() {
		@Override
		public void onReceive(Context arg0, Intent arg1) {
			int state = arg1.getIntExtra(BluetoothAdapter.EXTRA_STATE, -1);
			int pre_state = arg1.getIntExtra(
					BluetoothAdapter.EXTRA_PREVIOUS_STATE, -1);
			switch (state) {
			case (BluetoothAdapter.STATE_TURNING_ON): {
				// 正在打开蓝牙
			}
				break;
			case (BluetoothAdapter.STATE_TURNING_OFF): {
				// 正在关闭蓝牙
			}
				break;
			case (BluetoothAdapter.STATE_ON): {
				// 已打开蓝牙
				mUI.noteBtTurnOn();
			}
				break;
			case (BluetoothAdapter.STATE_OFF): {
				// 已关闭蓝牙
			}
				break;
			case (BluetoothAdapter.STATE_CONNECTING): {
				// 正在连接
			}
				break;
			case (BluetoothAdapter.STATE_DISCONNECTING): {
				// 正在断开连接
			}
				break;
			case (BluetoothAdapter.STATE_CONNECTED): {
				// 已连接
			}
				break;
			case (BluetoothAdapter.STATE_DISCONNECTED): {
				// 已断开连接
			}
				break;

			default: {
				// 未知状态
			}
				break;
			}
		}
	};
	private BroadcastReceiver bvr_bt_discovery_start = new BroadcastReceiver() {

		@Override
		public void onReceive(Context arg0, Intent arg1) {
			String state = arg1.getAction();

			if (state.equals(BluetoothAdapter.ACTION_DISCOVERY_STARTED)) {
				// 扫描开始
			} else {
				// 未知的扫描状态

			}

		}
	};
	private BroadcastReceiver bvr_bt_discovery_state = new BroadcastReceiver() {

		@Override
		public void onReceive(Context arg0, Intent arg1) {
			String state = arg1.getAction();
			if (state.equals(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)) {
				// "扫描完成
				mUI.onScanFinish();
			} else {
				// 未知的扫描状态
			}

		}
	};
	// -------------------------------
	private Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			if (msg.what == MSG_DO_READ_USER_HEAD_IMG) {
				if (msg.obj != null) {
					((AlphaApplication) mContext.getApplicationContext())
							.setUserHead((Bitmap) msg.obj);
					mUI.onReadHeadImgFinish(true, (Bitmap) msg.obj);
				} else {
					mUI.onReadHeadImgFinish(false, null);
				}
			}
			if (msg.what == MSG_DO_COON_BT_SUCCESS) {
				mUI.onCoonected(true);
				((AlphaApplication) mContext.getApplicationContext())
						.setRobotHardVersion(mCurrentLocalHardVersion);
				((AlphaApplication) mContext.getApplicationContext())
						.setRobotSoftVersion(mCurrentLocalSoftVersion);
			}
			if (msg.what == MSG_DO_COON_BT_FAIL) {
				mUI.onCoonected(false);
			}
			if (msg.what == MSG_DO_UPDATE_BIN) {
				mUI.noteUpdateBin();
				EngineUpdateManager.getInstance(mContext, (String) msg.obj,
						ScanHelper.this).Update();
			}

			if (msg.what == MSG_DO_SCAN_FINISH) {
				mUI.onScanFinish();
			}
		}
	};

	// -------------------------------
	private BluetoothDevice getDeviceById(String mac) {
		BluetoothDevice result = null;
		if (mDevicesList != null) {
			for (int i = 0; i < mDevicesList.size(); i++) {
				if (mDevicesList.get(i).getAddress().equals(mac))
					result = mDevicesList.get(i);
			}
		}
		return result;
	}

	public void distoryHelper() {

		MyLog.writeLog("ScanHelper类测试", "销毁ScanHelper");

		((AlphaApplication) mContext.getApplicationContext())
				.getBlueToothManager().removeBlueToothInteraction(this);

		try {

			mContext.unregisterReceiver(bvr_bt_discovery_new_devices);
			mContext.unregisterReceiver(bvr_bt_state_change);
			mContext.unregisterReceiver(bvr_bt_discovery_start);
			mContext.unregisterReceiver(bvr_bt_discovery_state);
		} catch (Exception e) {
			e.printStackTrace();
		}

		thiz_state = false;
	}

	public ScanHelper(IScanUI _ui, Context _context) {
		MyLog.writeLog("ScanHelper类测试", "ScanHelper创建实例");
		this.mUI = _ui;
		this.mContext = _context;
		registerBoardCastReceiver();
		mBtAdapter = BluetoothAdapter.getDefaultAdapter();
		if (!mBtAdapter.isEnabled()) {
			mBtAdapter.enable();
		}
		mDevicesList = new ArrayList<BluetoothDevice>();
		mDevicesRssiMap = new HashMap<BluetoothDevice, Integer>();

		if (((AlphaApplication) mContext.getApplicationContext())
				.getBlueToothManager() == null) {
			((AlphaApplication) mContext.getApplicationContext())
					.setBlueToothManager(new BlueToothManager(this.mContext));

			((AlphaApplication) mContext.getApplicationContext())
					.getBlueToothManager().startProcess();
		}
		((AlphaApplication) mContext.getApplicationContext())
				.getBlueToothManager().addBlueToothInteraction(this);
		if (((AlphaApplication) mContext.getApplicationContext())
				.getDBAlphaInfoManager() == null) {
			((AlphaApplication) mContext.getApplicationContext())
					.setDBAlphaInfoManager(new DBAlphaInfoManager(mContext));
		}
		thiz_state = true;
	}

	public List<AlphaInfo> getHistoryDevices() {
		history_list = ((AlphaApplication) mContext.getApplicationContext())
				.getDBAlphaInfoManager().getAllInfo();
		return history_list;
	}

	public void doReadUserHead() {

		AlphaApplication app = null;
		try {

			app = (AlphaApplication) mContext.getApplicationContext();
		} catch (Exception e) {
			e.printStackTrace();
		}

		UserInfo currentUser = ((AlphaApplication) mContext
				.getApplicationContext()).getCurrentUserInfo();

		String str = currentUser.userImage;

		do_read_user_head_img_request = GetDataFromWeb.getImgFromHttp(
				((AlphaApplication) mContext.getApplicationContext())
						.getCurrentUserInfo().userImage, this);
	}

	public void getBindHistoryDerivce() {
		mUI.onGetHistoryBindDevices(mBtAdapter.getBondedDevices());
	}

	public void doScan() {
		if (!mBtAdapter.isEnabled()) {
			mUI.noteBtIsOff();
			return;
		}
		if (mBtAdapter.isDiscovering()) {
			mUI.noteIsScaning();
			return;
		}
		if (mDevicesList != null)
			mDevicesList.clear();
		mBtAdapter.startDiscovery();
	}

	public void doBLEScan() {
		if (!mBtAdapter.isEnabled()) {
			mUI.noteBtIsOff();
			return;
		}
		if (mBtAdapter.isDiscovering()) {
			mUI.noteIsScaning();
			return;
		}
		if (mDevicesRssiMap != null)
			mDevicesRssiMap.clear();
		if (mDevicesList != null)
			mDevicesList.clear();
		mBtAdapter.startLeScan(this);
	}

	@Override
	public void onGetImage(boolean isSuccess, Bitmap bitmap, long request_code) {
		if (do_read_user_head_img_request == request_code) {
			if (isSuccess) {
				Message msg = new Message();
				msg.obj = bitmap;
				msg.what = MSG_DO_READ_USER_HEAD_IMG;
				mHandler.sendMessage(msg);
			} else {
				Message msg = new Message();
				msg.obj = null;
				msg.what = MSG_DO_READ_USER_HEAD_IMG;
				mHandler.sendMessage(msg);
			}
		}
	}

	private void registerBoardCastReceiver() {

		mContext.registerReceiver(bvr_bt_state_change, new IntentFilter(
				BluetoothAdapter.ACTION_STATE_CHANGED));
		mContext.registerReceiver(bvr_bt_discovery_start, new IntentFilter(
				BluetoothAdapter.ACTION_DISCOVERY_STARTED));
		mContext.registerReceiver(bvr_bt_discovery_state, new IntentFilter(
				BluetoothAdapter.ACTION_DISCOVERY_FINISHED));
		mContext.registerReceiver(bvr_bt_discovery_new_devices,
				new IntentFilter(BluetoothDevice.ACTION_FOUND));

	}

	public void doDelHistory(int index) {
		AlphaInfo i = history_list.get(index);
		if (i.isConnect()) {
			((AlphaApplication) mContext.getApplicationContext())
					.getBlueToothManager().releaseAllConnected();
		}
		((AlphaApplication) mContext.getApplicationContext())
				.getDBAlphaInfoManager().deleteDevice(i.getMacAddr());
		mUI.updateHistory();
	}

	public void doReCoonect(Map<String, Object> robot_info) {
		is_need_update = true;
		BluetoothDevice device = mBtAdapter.getRemoteDevice((String) robot_info
				.get(map_val_robot_mac));
		MyLog.writeLog("切换机器人测试", "目标机器人-->" + device.getAddress());
		((AlphaApplication) mContext.getApplicationContext())
				.getBlueToothManager().releaseAllConnected();
		MyLog.writeLog("切换机器人测试", "释放所有机器人");
		((AlphaApplication) mContext.getApplicationContext())
				.getBlueToothManager().connectDevice(device);

	}

	public void doCoonect(Map<String, Object> robot_info) {
		is_need_update = true;
		MyLog.writeLog("升级模块测试", this.hashCode()
				+ ":doCoonect-->is_need_update:" + is_need_update);
		BlueToothManager manager = ((AlphaApplication) mContext
				.getApplicationContext()).getBlueToothManager();
		if (manager.getmBluetoothUtil().getState() != BluetoothUtil.STATE_CONNECTING) {
			if (!(Boolean) robot_info.get("map_val_robot_connect_state")) {

				BluetoothDevice device = mBtAdapter
						.getRemoteDevice((String) robot_info
								.get(map_val_robot_mac));
				manager.connectDevice(device);

			}

		}

	}

	public void doGoToNextPage() {
		// 防止连续跳转-----------start
		Date curDate = new Date(System.currentTimeMillis());
		float time_difference = 500;
		if (lastTime_doGoToNextPage != null) {
			time_difference = curDate.getTime()
					- lastTime_doGoToNextPage.getTime();
		}
		lastTime_doGoToNextPage = curDate;
		if (time_difference < 500) {
			return;
		}
		// 防止连续跳转-----------end
		MyLog.writeLog("切换机器人测试", "连接成功，跳转至主界面");
		this.distoryHelper();
		Intent inte = new Intent();
		inte.setClass(mContext, MainActivity.class);
		mContext.startActivity(inte);
	}

	private void doUpdateUI() {
		// 更新UI
		Message msg = new Message();
		msg.what = MSG_DO_COON_BT_SUCCESS;
		mHandler.sendMessage(msg);
	}

	@Override
	public void onReceiveData(String mac, byte cmd, byte[] param, int len) {
		// TODO Auto-generated method stub

		if (cmd == ConstValue.DV_HANDSHAKE) {

			// 防止连续回复-----------start
			Date curDate = new Date(System.currentTimeMillis());
			float time_difference = 1000;
			if (lastTime_DV_HANDSHAKE != null) {
				time_difference = curDate.getTime()
						- lastTime_DV_HANDSHAKE.getTime();
			}
			lastTime_DV_HANDSHAKE = curDate;
			if (time_difference < 500) {
				return;
			}
			// 防止连续回复-----------end

			MyLog.writeLog("升级模块测试", "收到握手命令");
			// 设置当前连接状态
			String name = null;
			try {
				name = new String(param, "GBK");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			((AlphaApplication) mContext.getApplicationContext())
					.setCurrentDeviceName(name);
			((AlphaApplication) mContext.getApplicationContext())
					.setCurrentBluetooth(mBtAdapter.getRemoteDevice(mac));

			MyLog.writeLog("升级模块测试", "发送时钟校准命令");
			byte[] timeParam = TimeTools.getCurrentDateTimeBytes();
			((AlphaApplication) mContext.getApplicationContext())
					.getBlueToothManager().sendCommand(mac,
							ConstValue.DV_ADJUST_TIME, timeParam,
							timeParam.length);
			// 记录到数据库
			AlphaInfo info = new AlphaInfo();
			info.setBlueToothName(((AlphaApplication) mContext
					.getApplicationContext()).getCurrentBluetooth().getName());
			info.setConnect(true);
			if (name == null)
				info.setName("Alpha1");
			else
				info.setName(name);
			info.setMacAddr(((AlphaApplication) mContext
					.getApplicationContext()).getCurrentBluetooth()
					.getAddress());
			((AlphaApplication) mContext.getApplicationContext())
					.getDBAlphaInfoManager().addAlphaInfo(info);
		} else if (cmd == ConstValue.DV_ADJUST_TIME) {
			// 收到校准时钟回复，读取机器人状态判断是否升级机器人
			MyLog.writeLog(
					"升级模块测试",
					ScanHelper.this.hashCode()
							+ ":com.ubt.alpha1s.ui.helper.ScanHelper.onReceiveData-->收到校准时钟回复，读取机器人状态判断是否升级机器人");
			byte[] params = new byte[1];
			params[0] = 0;
			((AlphaApplication) mContext.getApplicationContext())
					.getBlueToothManager().sendCommand(mac,
							ConstValue.DV_READSTATUS, params, params.length);
		} else if ((cmd & 0xff) == (ConstValue.DV_READSTATUS & 0xff)) {
			MyLog.writeLog("升级模块测试", this.hashCode() + ":收到状态信息is_need_update:"
					+ is_need_update);
			// 声音状态
			if (param[0] == 0) {
				// 静音
				if (param[1] == 1) {

				}
				// 有声音
				else {

				}

			}
			// 播放状态
			else if (param[0] == 1) {
				// 暂停
				if (param[1] == 0) {

				}
				// 非暂停
				else {

				}
			}
			// 音量状态
			else if (param[0] == 2) {

				int nCurrentVolume = param[1];
				if (nCurrentVolume < 0) {
					nCurrentVolume += 256;
				}

			}
			// 舵机灯状态
			else if (param[0] == 3) {
				// 灭
				if (param[1] == 0) {

				}
				// 亮
				else {

				}
			} else if (param[0] == 4) {
				// 拔出
				if (param[1] == 0) {
					ScanHelper.this.doUpdateUI();
				}
				// 插入
				else {
					// 在插入状态下尝试升级机器
					// 获取机器人bin文件版本
					if (1 == 0) {
						doUpdateUI();
						return;
					}

					if (is_need_update) {
						MyLog.writeLog("升级模块测试", "is_need_update------置假");
						is_need_update = false;
						MyLog.writeLog("升级模块测试",
								"TF卡插入，检测升级-->DV_READ_SOFTWARE_VERSION命令发出");
						byte[] param_read = new byte[1];
						param[0] = 0;
						((AlphaApplication) mContext.getApplicationContext())
								.getBlueToothManager().sendCommand(mac,
										ConstValue.DV_READ_SOFTWARE_VERSION,
										param_read, param_read.length);
					}
					// else {
					// MyLog.writeLog("切换机器人测试", "却换成功，更新UI");
					// try {
					// doUpdateUI();
					// } catch (Exception e) {
					// e.printStackTrace();
					// }
					// }
				}
			}
		} else if (cmd == ConstValue.DV_READ_SOFTWARE_VERSION) {
			mCurrentLocalSoftVersion = new String(param);
			// 读取机器人硬件版本
			// 如果读取硬件版本超时
			if (mReadHardVersionTimer != null)
				mReadHardVersionTimer.cancel();
			mReadHardVersionTimer = new Timer();
			mReadHardVersionTimer.schedule(new TimerTask() {
				@Override
				public void run() {
					mCurrentLocalHardVersion = EngineUpdateManager.Alphas_Old;
					doRequestForUpdateBin(mCurrentLocalSoftVersion,
							mCurrentLocalHardVersion);
				}
			}, 5000);
			// 发起读硬件版本命令
			byte[] read_param = new byte[1];
			param[0] = 0;
			((AlphaApplication) mContext.getApplicationContext())
					.getBlueToothManager().sendCommand(mac,
							ConstValue.DV_READ_HARDWARE_VERSION, read_param,
							read_param.length);
		} else if (cmd == ConstValue.DV_READ_HARDWARE_VERSION) {
			String version = new String(param);
			this.mReadHardVersionTimer.cancel();
			mCurrentLocalHardVersion = version;
			doRequestForUpdateBin(mCurrentLocalSoftVersion,
					mCurrentLocalHardVersion);
		}
	}

	private void doRequestForUpdateBin(String soft_version, String hard_version) {

		MyLog.writeLog("升级模块测试", "读到软硬件版本：soft_version-->" + soft_version
				+ ",hard_version-->" + hard_version);

		String version_prod = "1";
		String version_prod_type = "";

		if (hard_version.toLowerCase().contains(
				EngineUpdateManager.Alphas_Old.toLowerCase())) {
			version_prod_type = "1";
		} else if (hard_version.toLowerCase().contains(
				EngineUpdateManager.Alpha1s.toLowerCase())) {
			version_prod_type = "2";
		} else if (hard_version.toLowerCase().contains(
				EngineUpdateManager.Alpha1p.toLowerCase())) {
			version_prod_type = "3";
		} else if (hard_version.toLowerCase().contains(
				EngineUpdateManager.Alpha1_General.toLowerCase())) {
			version_prod_type = "4";
		}

		do_check_bin_version_request = GetDataFromWeb.getJsonByPost(HttpAddress
				.getRequestUrl(Request_type.check_apk_update), HttpAddress
				.getParamsForPost(new String[] { version_prod,
						version_prod_type, "0" },
						Request_type.check_apk_update, mContext), this);

	}

	@Override
	public void onSendData(String mac, byte[] datas, int nLen) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onConnectState(boolean bsucceed, String mac) {
		// 防止连续回复-----------start
		Date curDate = new Date(System.currentTimeMillis());
		float time_difference = 1000;
		if (lastTime_onConnectState != null) {
			time_difference = curDate.getTime()
					- lastTime_onConnectState.getTime();
		}
		lastTime_onConnectState = curDate;
		if (time_difference < 500) {
			return;
		}
		// 防止连续回复-----------end
		MyLog.writeLog("升级模块测试", "收到连接回复：" + bsucceed);
		if (bsucceed) {
			MyLog.writeLog("升级模块测试", "发送握手命令");
			((AlphaApplication) mContext.getApplicationContext())
					.getBlueToothManager().sendCommand(mac,
							ConstValue.DV_HANDSHAKE, null, 0);
		} else {
			Message msg = new Message();
			msg.what = MSG_DO_COON_BT_FAIL;
			mHandler.sendMessage(msg);
		}
	}

	@Override
	public void onDeviceDisConnected(String mac) {
		((AlphaApplication) mContext.getApplicationContext())
				.setCurrentBluetooth(null);
	}

	@Override
	public void onGetJson(boolean isSuccess, String json, long request_code) {
		// TODO Auto-generated method stub
		if (do_check_bin_version_request == request_code) {
			if (JsonTools.getJsonStatus(json)) {
				try {
					String remote_soft_version_str = JsonTools.getJsonModel(
							json).getString("versionName");
					int remote_soft_version = Integer
							.parseInt(remote_soft_version_str.substring(1));
					int local_soft_version = Integer
							.parseInt(mCurrentLocalSoftVersion);
					MyLog.writeLog("bin文件升级功能",
							"比较远程和本地的bin文件版本：remote_soft_version-->"
									+ remote_soft_version
									+ ",local_soft_version"
									+ local_soft_version);
					if (remote_soft_version > local_soft_version) {
						// 升级
						Message msg = new Message();
						msg.what = MSG_DO_UPDATE_BIN;
						msg.obj = JsonTools.getJsonModel(json).getString(
								"versionPath");
						mHandler.sendMessage(msg);
					} else {
						// 不升级
						doUpdateUI();
					}
				} catch (JSONException e) {
					// 不升级
					doUpdateUI();
				}
			} else {
				// 不升级
				doUpdateUI();
			}
		}
	}

	@Override
	public void onUpdateFinish(boolean is_success) {
		// TODO Auto-generated method stub
		if (is_success) {
			// doUpdateUI();
		} else
			doUpdateUI();
	}

	public void addToAppActiviryList(Activity activity) {
		((AlphaApplication) mContext.getApplicationContext())
				.addToActivityList(activity);
	}

	public void removeAppActiviryList(Activity activity) {
		((AlphaApplication) mContext.getApplicationContext())
				.removeActivityList(activity);
	}

	@Override
	public void onLeScan(BluetoothDevice newDevices, int rssi, byte[] arg2) {

		if (getDeviceById(newDevices.getAddress()) == null) {

			mDevicesList.add(newDevices);
			mDevicesRssiMap.put(newDevices, rssi);
			mUI.onGetNewDevicesParams(mDevicesList, mDevicesRssiMap);
			try {
				StopScanBLETimer.cancel();
			} catch (Exception e) {
				e.printStackTrace();
			}
			StopScanBLETimer = new Timer();
			StopScanBLETimer.schedule(new TimerTask() {
				@Override
				public void run() {
					StopScanBLETimer = null;
					mBtAdapter.stopLeScan(ScanHelper.this);
					Message msg = new Message();
					msg.what = MSG_DO_SCAN_FINISH;
					mHandler.sendMessage(msg);

				}
			}, 30 * 1000);
		}
	}
}
